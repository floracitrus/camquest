// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  badges        Badge[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model College {
  id          Int      @id @default(autoincrement())
  name        String
  founded     Int
  address     String
  description String   @db.Text
  website     String
  latitude    Float
  longitude   Float
  motto       String?
  history     String?  @db.Text
  endowment   Float?
  badges      Badge[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Badge {
  id          Int      @id @default(autoincrement())
  userId      String
  collegeId   Int
  status      String   // pending, verified, rejected
  diningPhoto String?  // URL to photo
  portraitPhoto String? // URL to photo
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  college     College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)

  @@unique([userId, collegeId])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  collegeId Int
  category  String   // dining_hall, mcr, jcr, bar
  rating    Int      // 1-5
  comment   String?  @db.Text
  photos    String[] // Array of photo URLs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  college   College  @relation(fields: [collegeId], references: [id], onDelete: Cascade)

  @@unique([userId, collegeId, category])
}
